             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS	|
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* process.h */
#define USER_STACK (PHYS_BASE - 4)

/* process.c */
#define ARG_MAX 32
#define DELIMITER " "

struct process_params
  {
    /* input */
    char *name;
    char *args;
    struct thread *parent;
    struct semaphore started;

    /* output */
    bool success;
  };

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

1. filename에서 프로그램 이름과 실행 인자를 분리합니다.
2. 전체 실행 인자를 각각 분리해서 argv 배열에 하니씩 저장합니다.
3. user stack에 argv 배열의 마지막 원소부터 첫 번째 원소까지 복사합니다.
4. user stack에 저장된 첫 번째 인자의 주소를 user stack에 저장합니다.
5. user stack에 실행 인자 개수를 저장합니다.
6. user stack에 복귀 주소를 저장합니다. (복귀 주소를 사용하지는 않지만 규칙을 맞추기 위해서 가짜 복귀 주소를 넣습니다.)

>> How do you avoid overflowing the stack page?

실행 인자 최대 개수(ARG_MAX)를 정의합니다.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() 함수는 내부적으로 정적 변수를 사용하기 때문에 스레드 안정성이 없습니다. strtok_r() 함수는 출력 매개 변수로
분리된 문자열을 반환하기 때문에 스레드 안정성이 있습니다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. redirection, pipe 등과 같은 다른 프로그램과 연동할 수 있습니다.
2. 다양한 문자열 처리 함수를 사용할 수 있습니다.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* thread.h */
#define NOFILE 128

struct thread
  {
    ...
    
    struct semaphore running;
    int exit_status;
    struct semaphore wait;

    struct file *executable;
    struct file *open_files[NOFILE];

    struct thread *parent;
    struct list child_list;
    struct list_elem child_elem;

    ...
  }

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

thread 구조체에 open_files 배열로 현재 프로세스가 사용 중인 파일을 관리합니다.
open() 함수가 호출되면 open_files 배열에서 비어있는 위치를 찾아서 그 위치를
file descriptor로 사용합니다. 그리고 open_files 배열은 프로세스마다 별도로
관리하기 때문에, file descriptor는 프로세스마다 고유합니다.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

# read syscall

1. stack에서 fd, buffer, size 파라미터를 읽어옵니다.
2. 파라미터가 유효하다면
2-1. fd가 stdin이라면
2-1-1. 표준 입력으로부터 데이터를 읽어서 buffer에 저장합니다.
2-1-2. 읽은 데이터의 크기를 바이트로 반환합니다.
2-2. fd가 stdin이 아니고, open_fiels[fd]가 NULL이 아니면
2-2-1. 파일 시스템을 사용하여 해당 파일을 읽어서 buffer에 저장합니다.
2-2-2. 읽은 데이터의 크기를 바이트로 반환합니다.
3. 파라미터가 유효하지 않거나, open_files[fd]가 NULL이면
3-1. -1을 반환합니다.

# write syscall

1. stack에서 fd, buffer, size 파라미터를 읽어옵니다.
2. 파라미터가 유효하다면
2-1. fd가 stdout이라면
2-1-1. 표준 출력으로 buffer의 데이터를 씁니다.
2-1-2. 출력한 데이터의 크기를 바이트로 반환합니다.
2-2. fd가 stdout이 아니고, open_files[fd]가 NULL이 아니면
2-2-1.파일 시스템으로 해당 파일에 쓰기를 합니다.
2-2-2. 출력한 데이터의 크기를 바이트로 반환합니다.
3. 파라미터가 유효하지 않거나, open_files[fd]가 NULL이면
3-1. -1을 반환합니다.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

부모 프로세스가 wait() 함수를 호출하면, 해당 자식 프로세스의 running 세마포어의 값을 하나 감소시켜서 종료될 때까지 대기합니다. (running 세마포어는 thread가 생성될 때, 0으로 초기화됩니다.)
자식 프로세스가 종료될 때는 running 세마포어의 값을 하나 증가시켜서 대기 중인 부모 프로세스를 준비 상태로 만듭니다.
그리고 부모 프로세스가 자식 프로세스의 exit_status 값을 읽을 때까지 wait 세마포어의 값을 하나 감소시켜서 대기합니다. (wait 세마포어는 thread가 생성될 때, 0으로 초기화됩니다.)
부모 프로세스는 자식 프로세스의 exit_status 값을 가져간 다음, 자식 프로세스의 wait 세마포어의 값을 하나 증가시켜서 자식 프로세스를 준비 상태로 만듭니다.
이후에 자식 프로세스는 종료합니다.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

시스템 콜에서 user stack에 있는 값을 읽어올 때는 pop_stack() 함수를 사용합니다.
이 함수는 stack에서 값을 읽어온 후 stack이 유효한 지 검사를 해서 그렇지 않은 경우
exit (-1)을 호출하여 프로세스를 종료합니다.

write(), read() 함수처럼 사용자가 넘겨준 메모리에 값을 읽거나 쓰는 경우에는
page_fault 인터럽트를 활용합니다. 프로세스가 자신에게 할당된 페이지 영역을
넘어서는 접근 요청이 온 경우, page_fault 인터럽트가 발생하고 여기서 프로세스를
종료시킵니다. (exit (-1)) 

파일 시스템 콜에서 경쟁 조건을 막기 위해서 공유 자원인 file_lock이 있습니다.
프로세스가 종료될 경우, process_exit() 함수가 호출되는데 여기서 만약 file_lock을
획득한 상태라면 자원을 해제하고 종료되도록 구현했습니다.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

프로세스를 실행할 때, 스레드를 생성하는데 이때 매개변수로 process_params 구조체를 보냅니다.
여기에 started 세마포어와 success 부울 변수가 있는데, started 세마포어를 통해 프로그램 이미지를
메모리에 불러오는데 성공할 때까지 대기하고, success 변수에는 성공여부를 저장하여 만약 success 변수가
false인 경우 결과를 TID_ERROR로 반환합니다. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

프로세스가 종료될 때, 부모 프로세스가 있는지 검사합니다. 만약 부모 프로세스가 있다면
wait 세마포어를 사용하여 대기합니다. 그리고 부모 프로세스는 wait() 함수에서 자식 프로세스의
exit_status를 읽어온 다음 wait 세마포어를 사용해 자식 프로세스를 깨웁니다.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

push_stack(), pop_stack 함수를 사용해서 user memory에 접근 하는데, 이것을 통해
코드 중복을 없애고 유지 보수를 용이하게 합니다.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

# advantages

1. 프로세스별로 파일 디스크립터를 관리하기 때문에, 다른 프로세스의 파일 디스크립터를
손상시킬 걱정을 하지 않아도 됩니다. 또한 파일을 열어서 읽을 때, 프로세스마다 별도의
offset을 갖게 되므로 여러 프로세스가 같은 파일에 대해 읽고 쓰기 작업을 할 때, 관리가
필요하지 않습니다.

2. 프로세스마다 파일 디스크립터를 생성하기 때문에 동기화를 신경쓰지 않아도 됩니다.

# disadvantages

1. 프로세스마다 파일 디스크립터 테이블이 필요하므로 메모리 사용량이 증가합니다.
2. 프로세스끼리 파일을 공유하기 어렵습니다.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

하나의 프로세스가 여러개의 스레드를 갖도록 변경한다면, pid_t와 tid_t를 분리하는 것이
좋을 수 있습니다. 예를 들면, 프로세스 내의 어떤 작업의 우선 순위를 높히고 낮추는 등
세밀한 제어가 가능합니다.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
